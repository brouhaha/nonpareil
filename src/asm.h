/*
Copyright 1995-2023 Eric Smith <spacewar@gmail.com>
SPDX-License-Identifier: GPL-3.0-only

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License version 3 as
published by the Free Software Foundation.

Note that permission is NOT granted to redistribute and/or modify
this porogram under the terms of any other version, earlier or
later, of the GNU General Public License.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License version 3 for more details.

You should have received a copy of the GNU General Public License
version 3 along with this program (in the file "gpl-3.0.txt"); if not,
see <https://www.gnu.org/licenses/>.
*/

#ifndef ASM_H
#define ASM_H

#include "arch.h"

extern int arch;

typedef uint16_t addr_t;

typedef enum
{
  PASS_INITIAL = 1,
  PASS_FWD_REF,
  PASS_FINAL
} pass_t;

extern pass_t pass;
extern int errors;

extern bool parse_error;

extern addr_t pc;	/* current pc */
extern uint32_t bank_mask;  // 0 for all banks, or one bit set for each bank

extern char flag_char;  /* used to mark jumps across rom banks */

extern bool symtab_pseudoop_flag;

extern bool legal_flag;	// used to suppress warnings for unconditional
			// branches after arithmetic instructions

extern bool local_label_flag;  // true if ROM-local labels are in use
extern int local_label_current_rom;

#define OTHER_INST         0
#define ARITH_INST         1  // instruction that may set carry
#define TEST_INST          2
extern int last_instruction_type;


#define MAX_LINE 256
extern char linebuf [MAX_LINE];
extern char *lineptr;

extern const char *copyright_string;
extern const char *license_string;


#define MAXROM 16     /* classic and woodstock */


extern uint16_t asm_memory[16 * 4096];
// enough for Woodstock full address space
// (two banks), or three Nut pages


void pseudo_fillto(int addr, int val);

void pseudo_include (char *s);

int  get_lineno (void);

extern symtab_t *global_symtab;
extern symtab_t *symtab [MAXROM];  /* separate symbol tables for each ROM */

void define_symbol (char *s, int value);
void do_label (char *s);


void emit       (int op);  /* use for instructions that never set carry */
void emit_arith (int op);  /* use for arithmetic instructions that may set carry */
void emit_test  (int op);  /* use for test instructions */


void target (addr_t addr);  // set the target address of the current instruction
// for "delayed select rom" and "delayed select group":
void delayed_select (addr_t mask, addr_t bits);
addr_t get_next_pc (void);


/*
 * Check that val is in the range [min, max].  If so, return val.
 * If not, issue an error and return min.
 */
int range (int val, int min, int max);


/*
 * Check that val is in the range [min, max].  If so, return val.
 * If not, issue an error if pass 2, and return min
 */
int range_pass2 (int val, int min, int max);


/*
 * Check that val is in a specified subset of [0, 63] based on a bit mask.
 * If so, return val. 
 * If not, issue an error and return min.
 */
int range_mask (int val, uint64_t mask);


/*
 * print to both listing error buffer and standard error
 *
 * Use this for general messages.  Don't use this for warnings or errors
 * generated by a particular line of the source file.  Use error() or
 * warning() for that.
 */
int err_printf (char *format, ...);

/* generate error or warning messages and increment appropriate counter */
int error       (char *format, ...);
int asm_warning (char *format, ...);


/* lexers: */

int asm_lex      (void);  // generic, used only to parse .arch directive
int asm_cond_lex (void);  // used to parse conditional assembly directives
int casm_lex     (void);  // classic
int wasm_lex     (void);  // woodstock
int nasm_lex     (void);  // nut


/* parsers: */
typedef int (parser_t)(void);

extern parser_t *parser [ARCH_MAX];

int asm_parse      (void);  // generic, used only to parse .arch directive
int asm_cond_parse (void);  // used to parse conditional assembly directives
int casm_parse     (void);  // classic
int wasm_parse     (void);  // woodstock
int nasm_parse     (void);  // nut


typedef struct keyword
{
  char *name;
  int value;
} keyword_t;

int keyword (char *string, keyword_t *table);

#endif // ASM_H
